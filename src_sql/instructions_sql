CREATE DATABASE biblio CHARACTER SET 'utf8';
USE biblio;

-- Table des genres

CREATE TABLE genres (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom_genre VARCHAR(20) NOT NULL UNIQUE, 
  PRIMARY KEY pk_genre(id),
  INDEX ind_genres(nom_genre)
)
ENGINE = INNODB;


-- table des pays

CREATE TABLE pays (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom_p VARCHAR(30) NOT NULL UNIQUE,
  PRIMARY KEY pk_pays(id),
  INDEX ind_pays(nom_p)
  )
  ENGINE = INNODB;

-- table des langues

CREATE TABLE langues (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom_lan VARCHAR(30) NOT NULL UNIQUE,
  nbre INT UNSIGNED,
  PRIMARY KEY pk_langues(id),
  INDEX ind_langue(nom_lan),
  INDEX ind_nbre(nbre)
  )
  ENGINE = INNODB;



-- table des localisation, ma bibliothèque se trouvant éclatée en 3 lieux éloignés!

CREATE TABLE localisation (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom_lieu VARCHAR(30) NOT NULL UNIQUE,
  PRIMARY KEY pk_localisation(id)
  )
  ENGINE = INNODB;



-- Table des auteurs

CREATE TABLE auteurs (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom_aut VARCHAR(40) NOT NULL,
  prenom_aut VARCHAR(40),
  pays_aut INT UNSIGNED,
  annee_naiss INT UNSIGNED,
  annee_deces INT UNSIGNED,
  PRIMARY KEY pk_auteur(id),
  infos LONGTEXT,
  FOREIGN KEY fk_pays (pays_aut) REFERENCES pays(id),
  INDEX ind_aut(nom_aut,prenom_aut)
)
ENGINE = INNODB;

-- Table des livres  pourquoi les fk ne passent elles pas ?

CREATE TABLE livres (
id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom_liv VARCHAR(100) NOT NULL,
  cote VARCHAR(30),
  genre INT UNSIGNED NOT NULL,
  langue INT UNSIGNED NOT NULL,
  date_pub DATE,
  date_acq DATE,
  un_resume BOOLEAN,
  classement INT UNSIGNED NOT NULL,
  PRIMARY KEY pk_livre(id),
  INDEX ind_titre(nom_liv),
  FOREIGN KEY fk_genre(genre) REFERENCES genres(id),
  FOREIGN KEY fk_langue(langue) REFERENCES langues(id),
  FOREIGN KEY fk_lieux(classement) REFERENCES localisation(id)
  )
ENGINE = INNODB;

-- table auteurs / genre : un auteur peut écrire dans plusieurs genres, dans plusieurs langues, et un livre peut avoir plusieurs auteurs

CREATE TABLE auteur_genre (
  id_auteur INT UNSIGNED NOT NULL,
  id_genre INT UNSIGNED NOT NULL,
  PRIMARY KEY pk_auteur_genre (id_auteur,id_genre),
  FOREIGN KEY fk_aut (id_auteur) REFERENCES auteurs(id),
  FOREIGN KEY fk_genre(id_genre) REFERENCES genres(id)
  )
ENGINE = INNODB;

CREATE TABLE auteur_langue (
  id_auteur INT UNSIGNED NOT NULL,
  id_langue INT UNSIGNED NOT NULL,
  PRIMARY KEY pk_auteur_langue (id_auteur,id_langue),
  FOREIGN KEY fk_aut (id_auteur) REFERENCES auteurs(id),
  FOREIGN KEY fk_langue(id_langue) REFERENCES langues(id)
  )
ENGINE = INNODB;

CREATE TABLE  livre_auteurs(
  id_auteur INT UNSIGNED NOT NULL,
  id_livre INT UNSIGNED NOT NULL,
  PRIMARY KEY pk_livre_auteur (id_livre,id_auteur),
  FOREIGN KEY fk_aut (id_auteur) REFERENCES auteurs(id),
  FOREIGN KEY fk_livre(id_livre) REFERENCES livres(id)
  )
ENGINE = INNODB;

-- Je trouve que ce serait bien d'aboir une table pour enregitrer des résumés et avoir une recherche en fulltext que ne permet pas INNODB

CREATE TABLE resume_livres (
  id_livre INT UNSIGNED NOT NULL,             -- pas d'auto increment. Ce sera le même identifiant que dans la fiche livre
  resume LONGTEXT,
  PRIMARY KEY pk_resume(id_livre),
  FULLTEXT INDEX ind_resume (resume)
  )
ENGINE = MYISAM;



-- Tables pour l'enregistrement des cotes

CREATE TABLE cote1 (
id_cote1 INT UNSIGNED AUTO_INCREMENT NOT NULL,
code VARCHAR(3),
nom VARCHAR(50),
infos VARCHAR(255),
PRIMARY KEY pk_cote1(id_cote1)
)
ENGINE = INNODB;

CREATE TABLE cote2 (
id_cote2 INT UNSIGNED AUTO_INCREMENT NOT NULL,
cote1 INT UNSIGNED NOT NULL,
code VARCHAR(3),
nom VARCHAR(50),
infos VARCHAR(255),
PRIMARY KEY pk_cote2(id_cote2),
  FOREIGN KEY fk_idcote1 (cote1) REFERENCES cote1(id_cote1)
)
ENGINE = INNODB;

CREATE TABLE cote3 (
id_cote3 INT UNSIGNED AUTO_INCREMENT NOT NULL,
cote2 INT UNSIGNED NOT NULL,
code VARCHAR(5),
nom VARCHAR(50),
infos VARCHAR(255),
PRIMARY KEY pk_cote3(id_cote3),
  FOREIGN KEY fk_idcote2 (cote2) REFERENCES cote2(id_cote2)
)
ENGINE = INNODB;


CREATE TABLE cote4 (
-- compteur. Je ne mets pas un compteur entier, mais un compteur decimal afin de pouvoir insérer des cotes en cas
-- de besoin, ie s'il faut par exemple insérr un doublon, ou un épisode oublié dans un roman à épisodes
id_cote4 INT UNSIGNED AUTO_INCREMENT NOT NULL,
cote3 INT UNSIGNED NOT NULL,
code VARCHAR(5),
nom VARCHAR(50),
infos VARCHAR(255),
compteur DECIMAL(7,5) UNSIGNED,
PRIMARY KEY pk_cote4(id_cote4),
  FOREIGN KEY fk_idcote3 (cote3) REFERENCES cote3(id_cote3)
)
ENGINE = INNODB;



-- Table des périodicités

CREATE TABLE periodes (
id INT  UNSIGNED AUTO_INCREMENT NOT NULL,
nom VARCHAR(20),
PRIMARY KEY pk_periodes(id)
 )

 ENGINE = INNODB;

-- Table des titres de revues et périodiques

CREATE TABLE TitreRevues (
id INT UNSIGNED AUTO_INCREMENT NOT NULL,
nom VARCHAR(50),
periode INT UNSIGNED NOT NULL,  -- a lire dans une table
annee_deb INT,                 -- année de premiere publication
annee_fin INT,                 -- année de dernière publication
complet BOOLEAN,               -- Si j'ai tous les numéros
en_cours BOOLEAN,              -- pour les revues en cours
premier INT,                   -- le premier numéro dans ma collection
dernier INT,                   -- le dernier numéro dans ma collection
nombre INT,                   -- le nombre de numéros dans ma collection
infos TEXT,
PRIMARY KEY pk_titrerevues (id),
FOREIGN KEY fk_periodes (periode) REFERENCES periodes(id)
)  

ENGINE = INNODB;



-- fonction pour mettre une majuscule en début d'un mot (pour les noms propre et les noms de genre)

-- Triggers pour homogénéiser les noms dans les bases de données
      

-- Triggers
-- Sur la table langues:

DELIMITER |
CREATE TRIGGER before_insert_langues BEFORE INSERT ON langues
FOR EACH ROW
BEGIN
    SET NEW.nom_lan = UPPER(NEW.nom_lan);
  END; |
    DELIMITER ;

    DELIMITER |
CREATE TRIGGER before_update_langues BEFORE UPDATE ON langues
FOR EACH ROW
BEGIN
    SET NEW.nom_lan = UPPER(NEW.nom_lan);
  END; |
    DELIMITER ;


-- Sur la table pays:

DELIMITER |
CREATE TRIGGER before_insert_pays BEFORE INSERT ON pays
FOR EACH ROW
BEGIN
    SET NEW.nom_p = UPPER(NEW.nom_p);
  END; |
    DELIMITER ;

DELIMITER |
CREATE TRIGGER before_update_pays BEFORE UPDATE ON pays
FOR EACH ROW
BEGIN
    SET NEW.nom_p = UPPER(NEW.nom_p);
  END; |
    DELIMITER ;

   -- Sur la table auteurs:

DELIMITER |
CREATE TRIGGER before_insert_auteurs BEFORE INSERT ON auteurs
FOR EACH ROW
BEGIN
    SET NEW.nom_aut = UPPER(NEW.nom_aut);
  END; |
    DELIMITER ;

DELIMITER |
CREATE TRIGGER before_update_auteurs BEFORE UPDATE ON auteurs
FOR EACH ROW
BEGIN
    SET NEW.nom_aut = UPPER(NEW.nom_aut);
  END; |
    DELIMITER ;

-- Sur la table localisations:

DELIMITER |
CREATE TRIGGER before_insert_localisation BEFORE INSERT ON localisation
FOR EACH ROW
BEGIN
    SET NEW.nom_lieu = UPPER(NEW.nom_lieu);
  END; |
    DELIMITER ;

DELIMITER |
CREATE TRIGGER before_update_localisation BEFORE UPDATE ON localisation
FOR EACH ROW
BEGIN
    SET NEW.nom_lieu = UPPER(NEW.nom_lieu);
  END; |
    DELIMITER ;



    --  ******************** PARTIE SPECIFIQUE COLLECTIONS **********************


-- couleurs de timbres (dominante) ou de pièces
    CREATE TABLE couleurs (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom VARCHAR(30) NOT NULL UNIQUE,
  PRIMARY KEY pk_couleurs(id)
  )
  ENGINE = INNODB;

  DELIMITER |
CREATE TRIGGER before_insert_couleurs BEFORE INSERT ON couleurs
FOR EACH ROW
BEGIN
    SET NEW.nom = UPPER(NEW.nom);
  END; |
    DELIMITER ;

    DELIMITER |
CREATE TRIGGER before_update_couleurs BEFORE UPDATE ON couleurs
FOR EACH ROW
BEGIN
    SET NEW.nom = UPPER(NEW.nom);
  END; |
    DELIMITER ;





    -- Monnaies (unité monnétaire) 
    CREATE TABLE monnaie (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL,
  nom VARCHAR(30) NOT NULL UNIQUE,
  abrev VARCHAR(30) NOT NULL UNIQUE,
  PRIMARY KEY pk_monnaies(id)
  )
  ENGINE = INNODB;

  DELIMITER |
CREATE TRIGGER before_insert_monnaies BEFORE INSERT ON monnaies
FOR EACH ROW
BEGIN
    SET NEW.nom = UPPER(NEW.nom);
    SET NEW.abrev = LOWER(NEW.abrev);
  END; |
    DELIMITER ;

    DELIMITER |
CREATE TRIGGER before_update_monnaies BEFORE UPDATE ON monnaies
FOR EACH ROW
BEGIN
    SET NEW.nom = UPPER(NEW.nom);
    SET NEW.abrev = LOWER(NEW.abrev);
  END; |
    DELIMITER ;


-- Table des différents genre de stockage (albums, classeurs  de stock, cartes de tock, etc.)

CREATE TABLE genrestock (

id INT UNSIGNED AUTO_INCREMENT NOT NULL,
nom  VARCHAR (20),
remarques TEXT,
PRIMARY KEY pk_genrestock(id) )

ENGINE = INNODB


    DELIMITER |
CREATE TRIGGER before_update_genrestock BEFORE UPDATE ON genrestock
FOR EACH ROW
BEGIN
    SET NEW.nom = UPPER(NEW.nom);
  END; |
    DELIMITER ;


--  Table des différents stockages

CREATE TABLE albums (
id  INT UNSIGNED AUTO_INCREMENT NOT NULL,
genre INT UNSIGNED NOT NULL,
nom VARCHAR(50) NOT NULL,
lieu INT UNSIGNED NOT NULL ,                  -- Lien vers la table de localisaition
PRIMARY KEY pk_albums(id), 
FOREIGN KEY fk_genrestock(genre) REFERENCES genrestock(id),
FOREIGN KEY fk_localisation(lieu) REFERENCES localisation (id)
)

ENGINE INNODB



CREATE TABLE catyvert (

id INT UNSIGNED AUTO_INCREMENT ,
catalogue VARCHAR (20),     -- nom du catalogue, ex france
categorie VARCHAR(20) ,     -- nom de catégorie ex taxe
infos     VARCHAR(200),
PRIMARY KEY pk_catyvert(id)
)

ENGINE INNODB


DELIMITER |
CREATE TRIGGER before_update_catyvert BEFORE UPDATE ON  catyvert 
FOR EACH ROW
BEGIN
    SET NEW.catalogue = UPPER(NEW.catalogue);
     SET NEW.categorie = UPPER(NEW.categorie);
  END; |
    DELIMITER ;



DELIMITER |
CREATE TRIGGER before_insert_catyvert BEFORE INSERT ON  catyvert 
FOR EACH ROW
BEGIN
    SET NEW.catalogue = UPPER(NEW.catalogue);
     SET NEW.categorie = UPPER(NEW.categorie);
  END; |
    DELIMITER ;


    -- Table timbres

    CREATE TABLE timbres (
id INT UNSIGNED AUTO_INCREMENT NOT NULL,
numYT INT,                       -- numero Yvert et tellier, sans obligation -- 0 si inconnu
num_catyvert INT UNSIGNED ,    -- numero du catalogue + rubrique dans la table catyvert
varia VARCHAR (10),                  -- type dans le numéro
  nom VARCHAR(20),                   -- Le nom du timbre ou de la série
  faciale FLOAT,
  pays INT UNSIGNED NOT NULL,
  flouz INT UNSIGNED NOT NULL,              -- monnaies du timbre
  couleur INT UNSIGNED NOT NULL,
  photo VARCHAR(250),                -- chemin depuis le repertoire de photo vers la photo du timbre
  dossier BOOLEAN,                    -- false à la création. Passer à true si on fait des photos agrandies pour étude stockée
                                     -- dans un sous dossier du repertoire ci dessus
anneea INT,                          -- année d'acquisition / enregistrement
anneee INT,                          -- année d'emission
anneec INT,                         -- année de calcul de valeur
nbval INT,                         -- Nombre de cotes ayant servi à établir la valeur du timbre
valeur FLOAT,                       -- valeur calculée
valinit FLOAT,                     -- coût d'acquisition
stock INT UNSIGNED NOT NULL,        -- Le numéro de l'album, du classeur ou de la boite de stockage
page VARCHAR(20),                   -- numéro de page décimal, avec 5 chiffres genre 2.15.3.2.25
ligne INT,
colonne INT,                          -- Ligne sur laquelle est le timbre et colonne


  PRIMARY KEY pk_timbres(id),
  INDEX ind_nom(nom),

  FOREIGN KEY fk_pays(pays) REFERENCES pays(id),
  FOREIGN KEY fk_flouz(flouz) REFERENCES monnaies(id),
  FOREIGN KEY fk_couleur(couleur) REFERENCES couleurs(id),
  FOREIGN KEY fk_stock(stock) REFERENCES albums(id),
  FOREIGN KEY fk_catyvert(num_catyvert) REFERENCES catyvert(id)
  )
  
ENGINE = INNODB;


-- je prepare les triggers mais finalement je ne vois rien à y mettre

DELIMITER |
CREATE TRIGGER before_update_timbres BEFORE UPDATE ON  timbres
FOR EACH ROW
BEGIN

    DELIMITER ;



DELIMITER |
CREATE TRIGGER before_insert_timbre BEFORE INSERT ON  timbres
FOR EACH ROW
BEGIN

  END; |
    DELIMITER ;